{"version":3,"sources":["components/TextInput.js","components/Checkbox.js","components/Select.js","components/Radio.js","App.js","reportWebVitals.js","index.js"],"names":["TextInput","label","props","useField","field","meta","console","log","className","touched","error","Checkbox","children","type","Select","Radio","validate","values","errors","name","length","lastname","email","radio","App","initialValues","chancho","onSubmit","value","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.938e8b1f.chunk.js","sourcesContent":["import { useField } from 'formik'\r\n\r\nconst TextInput = ({ label, ...props }) => {\r\n    const [field, meta] = useField(props)\r\n\r\n    console.log({ field, meta })\r\n    //en el input se puede hacer el destructuring de las props también en el caso de querer cambiar el metodo onChange por ejemplo\r\n    return (\r\n        <div className=\"control\">\r\n            <label className=\"label\">{label}</label>\r\n            <input className=\"input\" {...field} {...props} />\r\n            {meta.touched && meta.error ? <div className=\"error\">{meta.error}</div> : null}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TextInput\r\n","import { useField } from 'formik'\r\n\r\nconst Checkbox = ({ children, ...props }) => {\r\n    const [field, meta] = useField({...props, type: 'checkbox' })\r\n    \r\n    return (\r\n        <div>\r\n            <label>\r\n                <input type=\"checkbox\" {...field} {...props}/>\r\n                {children}\r\n            </label>\r\n            {meta.touched && meta.error ? <div>{meta.error}</div> : null} \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Checkbox\r\n","import { useField } from 'formik'\r\n\r\nconst Select = ({ label, ...props}) => {\r\n    const [field, meta] = useField(props)\r\n    return (\r\n        <div>\r\n            <label>\r\n                <select {...field} {...props}/>\r\n                {meta.touched && meta.error ? <div>{meta.error}</div> : null }\r\n            </label>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Select\r\n","import { useField } from 'formik'\r\n//en componentes RadioButton la validacion se deja fuera,\r\n//ya que si se implementa, habría X mensajes de error por cada X opciones de RadioButton que existan\r\n\r\nconst Radio = ({ label, ...props }) => {\r\n    const [field] = useField({ ...props, type:'radio' })\r\n    return (\r\n        <div>\r\n            <label>\r\n                <input type=\"radio\" {...field} {...props} />\r\n                {label}            \r\n            </label>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Radio\r\n","import { Formik, Form, Field, ErrorMessage } from 'formik'\nimport TextInput from './components/TextInput'\nimport Checkbox from './components/Checkbox'\nimport Select from './components/Select'\nimport Radio from './components/Radio'\n\n\nconst validate = (values) => {\n  const errors = {} // creao un objeto errors\n\n  //validacion para el nombre\n  if(!values.name){\n    errors.name = 'Requerido' //le doy una nueva propiedad con el mismo nombre del campo que estoy validando\n  }else if (values.name.length < 5) {\n    errors.name = 'El nombre ha de contener más de 4 caracteres'\n  }\n\n  //validacion para el apellido\n  if(!values.lastname){\n    errors.lastname = 'Requerido' //le doy una nueva propiedad con el mismo nombre del campo que estoy validando\n  }else if (values.lastname.length < 3) {\n    errors.lastname = 'El apellido ha de contener más de 2 caracteres'\n  }\n\n  //validacion para el correo\n  if(!values.email){\n    errors.email = 'Requerido' //le doy una nueva propiedad con el mismo nombre del campo que estoy validando\n  }else if (values.email.length < 3) {\n    errors.email = 'El correo no es valido'\n  }\n\n  if(!values.radio) {\n    errors.radio = \"Requerido\"\n  }\n\n  return errors\n}\n\nfunction App() {\n  /*la propiedad handleSubmit hay que pasarsela a todos los formularios */\n  /*con ...formik.getFieldProps se incluye lo siguiente:\n  onChange={formik.handleChange}\n  onBlur={formik.handleBlur}\n  value={formik.values.name}*/\n\n  //El componente Field de Formik tiene la propiedad as para convertir a otro tipo de elemento el input como un textarea o un selector:\n  //<Field name=\"textarea\" as=\"textarea\" />\n  //<Field name=\"select\" as=\"select\">\n  // <option value=\"chanchitofeliz\">Chanchito feliz</option>\n  //</Field>\n\n  return (\n    <Formik\n      initialValues={{name: '', lastname: '', email: '', chancho: '', radio:'' }}\n      validate={validate}\n      onSubmit={values => console.log(values)}\n      >\n        <Form>\n          <TextInput name=\"name\" label=\"Nombre\" />\n          <br />\n          <TextInput name=\"lastname\" label=\"Apellido\" />\n          <br />\n          <TextInput name=\"email\" label=\"Correo\" />\n          <Select label=\"Tipo de chancho\" name=\"chancho\">\n            <option value=\"\">Seleccione chancho</option>\n            <option value=\"felipe\">Felipe</option>\n            <option value=\"chanchitofeliz\">Chanchito feliz</option>\n            <option value=\"chanchitotriste\">Chanchito triste</option>\n          </Select>\n          <Checkbox name=\"accept\">\n            Aceptar terminos y condiciones\n          </Checkbox>\n\n          <Radio name=\"radio\" value=\"chanchito1\" label=\"Chanchito 1\" />\n          <Radio name=\"radio\" value=\"chanchito2\" label=\"Chanchito 2\" />\n          <Radio name=\"radio\" value=\"chanchito3\" label=\"Chanchito 3\" />\n          <ErrorMessage name=\"radio\" />\n\n          <button type=\"submit\">Enviar</button>\n        </Form>\n    </Formik>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}